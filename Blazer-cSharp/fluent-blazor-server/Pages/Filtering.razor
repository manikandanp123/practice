@page "/filter"

<h3>Filtering</h3>
<div class="head">
    <p class="cat">categories</p>
    <div class="add"> <img class="plicon" src="image/plus1.svg" alt="add icon"><p class="plname">Add</p></div>
    <div class="delete"><img class="deicon" src="image/deleteicon.svg" alt="delete icon"><p class="dename">Delete</p></div>
</div>

<div class="mid">
    <FluentTextField Placeholder="Find" @oninput="FilterChanged"></FluentTextField>
</div>

<div class="tab">
    <FluentDataGrid  class="tab1" id="sortingGrid" GridTemplateColumns="400px 400px 400px" RowsData=SortedRowsGrid ColumnDefinitions=SortingColumnsGrid>
        <HeaderCellTemplate>
            <FluentButton @onclick=@(()=>SortColumn(context))>
                @context.Title
                @if (context.Title == lastSortColumn?.Title)
                {
                    @(isAscending ? " ↑" : " ↓")
                }
            </FluentButton>
        </HeaderCellTemplate>
    </FluentDataGrid>
</div>

@code {
    public record SampleGridData(string Categories, string Topics, string Action,string a );
    public List<ColumnDefinition<SampleGridData>> SortingColumnsGrid = new();
    private ColumnDefinition<SampleGridData>? lastSortColumn = null;
    private bool isAscending = false;
    public string filterValue = "";
    
    List<SampleGridData> RawSortedRowsGrid = new List<SampleGridData>()
    {
        new SampleGridData("Renewable Energy Energy Energy", "10", "x","Add Topic" ),
        new SampleGridData("Blockchain", "5", "x" ,"Add Topic"),
        new SampleGridData("Finance", "8", "x","Add Topic" ),
        new SampleGridData("Politics", "3", "x","Add Topic" )

    };
    List<SampleGridData> SortedRowsGrid = new();

    protected override void OnInitialized()
    {
        SortingColumnsGrid.Add(new ColumnDefinition<SampleGridData>("Categories", x => x.Categories));
        SortingColumnsGrid.Add(new ColumnDefinition<SampleGridData>("Topics", x => x.Topics));
        SortingColumnsGrid.Add(new ColumnDefinition<SampleGridData>("Action", x => x.Action));
        SortingColumnsGrid.Add(new ColumnDefinition<SampleGridData>("a", x => x.a));

        SortedRowsGrid = RawSortedRowsGrid;

        base.OnInitialized();
    }

    private void FilterChanged(ChangeEventArgs args)
    {
        var filter = args.Value as string;

        if (string.IsNullOrWhiteSpace(filter))
        {
            SortedRowsGrid = RawSortedRowsGrid;
        }
        else
        {
            SortedRowsGrid = RawSortedRowsGrid.Where(x => x.Categories.Contains(filter)).ToList();
        }
        if (lastSortColumn != null)
        {
            SortedRowsGrid.Sort(new CustomComparer(lastSortColumn.FieldSelector!, isAscending));
        }
    }

    private void SortColumn(ColumnDefinition<SampleGridData> columnDefinition)
    {
        if (lastSortColumn?.Title == columnDefinition.Title)
        {
            isAscending = !isAscending;
        }
        else
        {
            lastSortColumn = columnDefinition;
            isAscending = true;
        }
        SortedRowsGrid.Sort(new CustomComparer(columnDefinition.FieldSelector!, isAscending));
    }

    class CustomComparer : IComparer<SampleGridData>
    {
        Func<SampleGridData, object> _selector;
        bool _isAscending;

        public CustomComparer(Func<SampleGridData, object> selector, bool isAscending)
        {
            _selector = selector;
            _isAscending = isAscending;
        }

        int IComparer<SampleGridData>.Compare(SampleGridData? x, SampleGridData? y)
        {
            var xs = _selector(x!) as string;
            var ys = _selector(y!) as string;
            if (xs == null || ys == null)
                return 0;
            return string.Compare(xs, ys) * (_isAscending ? 1 : -1);
        }
    }
}


